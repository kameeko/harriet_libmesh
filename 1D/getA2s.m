function [A2u, A2z, snatch] = getA2s(xFE,k,u,z,upgradeMe)
%goes with becker_vexler_stretch6_adj

nElem = length(xFE)-1;
ni = [-1/sqrt(3) 1/sqrt(3)]; %quadrature nodes
wi = [1 1]; %quadrature weights

A2u = zeros(nElem+1,nElem+1);
A2z = zeros(nElem+1,nElem+1);
for elem = 1:nElem
    if upgradeMe(elem)
    n1 = elem; n2 = elem+1;
    x1 = xFE(n1); x2 = xFE(n2);
    bmao2 = 0.5*(x2-x1); bpao2 = 0.5*(x2+x1);
    nitil = bmao2*ni + bpao2;
    A2u(n1,n1) = A2u(n1,n1) + k*bmao2*dot(wi,...
        interp1([x1 x2],[u(n1) u(n2)],nitil)...
        .*interp1([x1 x2],[1 0],nitil).*interp1([x1 x2],[1 0],nitil));
    A2u(n1,n2) = A2u(n1,n2) + k*bmao2*dot(wi,...
        interp1([x1 x2],[u(n1) u(n2)],nitil)...
        .*interp1([x1 x2],[0 1],nitil).*interp1([x1 x2],[1 0],nitil));
    A2u(n2,n1) = A2u(n2,n1) + k*bmao2*dot(wi,...
        interp1([x1 x2],[u(n1) u(n2)],nitil)...
        .*interp1([x1 x2],[1 0],nitil).*interp1([x1 x2],[0 1],nitil));
    A2u(n2,n2) = A2u(n2,n2) + k*bmao2*dot(wi,...
        interp1([x1 x2],[u(n1) u(n2)],nitil)...
        .*interp1([x1 x2],[0 1],nitil).*interp1([x1 x2],[0 1],nitil));
    
    A2z(n1,n1) = A2z(n1,n1) + k*bmao2*dot(wi,...
        interp1([x1 x2],[z(n1) z(n2)],nitil)...
        .*interp1([x1 x2],[1 0],nitil).*interp1([x1 x2],[1 0],nitil));
    A2z(n1,n2) = A2z(n1,n2) + k*bmao2*dot(wi,...
        interp1([x1 x2],[z(n1) z(n2)],nitil)...
        .*interp1([x1 x2],[0 1],nitil).*interp1([x1 x2],[1 0],nitil));
    A2z(n2,n1) = A2z(n2,n1) + k*bmao2*dot(wi,...
        interp1([x1 x2],[z(n1) z(n2)],nitil)...
        .*interp1([x1 x2],[1 0],nitil).*interp1([x1 x2],[0 1],nitil));
    A2z(n2,n2) = A2z(n2,n2) + k*bmao2*dot(wi,...
        interp1([x1 x2],[z(n1) z(n2)],nitil)...
        .*interp1([x1 x2],[0 1],nitil).*interp1([x1 x2],[0 1],nitil));
    end
end
snatch = A2u(end-1,end);
A2u = A2u(2:end-1,2:end-1);
A2z = A2z(2:end-1,2:end-1);