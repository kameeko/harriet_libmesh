-> inverse prob for LF and HF; to avoid optimization algorithm, solve KKT system
  -> which adjoint system? stabilized adjoint or transposed of stabilized jacobian? for optimization problem where we care about a particular discretization, we want to use the transpose of the stabilized forward as the adjoint...
  -> is the adjoint of the stabilized system even the stabilized adjoint-of-unstabilized?
    -what is the meaning of the adjoint of a stabilized system anyways? the stabilization depends on the discretization...
      -> see supg_analysis.pdf
  -> what does the adaptivity theory rely on?
  
...aren't we inferring for a smooth source term, so regular stabilization should be fine?

debug:
nan residual?? after the linear solve...c doesn't seem to have moved from initial guess, based on qoi...also numerical and analytical jacobians don't match
  -> checking analytical jacobians takes a long time...on 46x33x3 mesh, two jacobians now match...still get nan...
  -> 5x5x3 should be small enough for matlab to read in without freezing...
    -nan whether supg toggled on or off
    -J is not full rank...311/432...fwd J was full rank, so shouldn't be about BCs of fwd+adjoint...
      -> if we view z as a forcing for f, then the gradient equation doesn't have a unique solution? is the regularization insufficient to make the problem well posed cuz it penalizes the gradient? is that why you chose forcing to be zero at boundaries?
      -> if f given homo Diri BCs, then J still not full rank (422/432) (485/504 for 5x6x3 mesh...)
      -> does giving either of the other BCs diri BCs fill up the remaining rank deficit?
        -f and c have homo diri: 352/432 O.o??
        -f and z have homo diri: 311/432
        -something wrong in interior? if all have homo diri and side residual contribution set to zero, still get nan's
          -interior terms look the same as in old cd_all inverse system...
          -matlab says rank is 417/432; if velocity increased to 2.415 (remove e-5 factor), then matlab thinks it's full rank...scaling problem? even with inceased velocity, still get nan...
          -do not get nan if superlu used with regular velocity, but then qoi becomes negative...same for original non-Diri BCs...
            -superlu is not the way to go...on 92x66x5 mesh, even bassi chokes...doesn't finish after 30 minutes...
          -if using inputs for HF for long_channel_stash/qoi2_setup02/HF, recover recorded QoI using superlu, but also get nan residual using default solver; Jacobian on coarser mesh is full rank
          
    system    mesh    variation                             gmres           gmres w/shift           superlu       rank(J)       cond(J)
    nandbg    25x5                                    fails, resid e7                               resid e-17    468/468 **      e3
    nandbg    15x3                                    resid e-14                                    resid e-17    192/192 **      e3
    invLF     5x5x3   f homo diri, no supg            fails, resid nan                              resid e-10    422/432 (same with fixed beta/gradf signs)
    invLF     5x5x3   f homo diri, vel*e5, no supg    fails, resid nan                              resid e-9     429/432
    invLF     5x5x3   f homo diri, vel*e6, no supg    fails, resid nan                              inex newt fails, resid e-8)         
    invLF     46x33x3  f homo diri, vel*e6, no supg                         inex newt fails, (resid e-1) resid e-9
    invLF     46x33x3  f homo diri, vel*e6, no supg, disp 400               inex newt fails, (resid e-2) resid e-8
    invLF     46x33x3  f homo diri, vel*e6, no supg, disp 4000              inex newt fails
    invLF     5x5x3   all homo diri, no supg          fails, resid nan                              resid e-7     417/432
    invLF     5x5x3   all homo diri, vel*e5, no supg  fails, resid nan                              resid e-7     432/432 **      e11
    invLF     5x5x3   all homo diri, vel*e6, no supg                        resid e-1 (9 order reduction)         432/432 **      e9
    invLF     5x5x3   all homo diri, vel*e6, #4 supg                        resid e-2 (10 order reduction)        432/432 **      e9
    invLF     46x33x3  all homo diri, vel*e6, no supg                       resid e-4 (11 order reduction)        
    invLF     5x5x3   all homo diri, vel*e5, no supg, disp 400              resid e-2 (10 order reduction)        432/432 **      e9
    invLF     5x5x3   all homo diri, vel*e5, #4 supg, disp 400              resid e-1 (9 order reduction)         432/432 **      e9
    invLF     5x5x3   all homo diri, vel/decade, no supg, disp 400          resid e-2 (9 order reduction)         432/432 **      e12
    invLF     5x5x3   all homo diri, option 4 supg    fails, resid nan                              resid e-7     417/432  
    invLF     5x5x3   f homo diri, option 4 supg      fails, resid nan                              resid e-9     422/432 
    nandbg    5x5x3   all homo diri, no supg          fails, resid nan                              resid e-7     417/432
    fwd       5x5x3   iso 40                          resid e-7                                     resid e-10    144/144 **      e2  
    nandbg    25x5x5  gave data z-coord, else same    fails, resid nan      resid e-9               resid e-16    TOO LARGE TO READ INTO MATLAB
    nandbg    15x3x3  gave data z-coord, else same    fails, resid nan      resid e-11              resid e-15    768/768 **      e3
    nandbg    15x3x3  gave data z-coord, just f diri                        resid e-12                            768/768 **      e6
    nandbg    15x3x3  gave data z-coord, just f diri, const v=0.5           resid e-11                           
    
    -nondimensionalize, compare current nandebug (put old nandbg params into invLF code?)?
      --wouldn't change the peclet number...is that what's really at the heart of f-homo-diri cases skimming singularity?
      -first implement last nandbg in inv_LF
        -sign on beta*grad_c and cpred-cstar were inconsistent...if match nandbg, then recover same qoi..if flip signs, then newton solve fails...
      -how to nondimensionalize with tensor diff? do you also scale domain?
        -without scaling domain, dividing by tensor*disp -> current nondimensionalization messes up 15x3x3 nandbg qoi...(should be 1.05191)
    -or maybe you really do need to go parallel?
    
    -> add pc_factor_shift_type nonzero:
    ./progname -ksp_monitor_singular_value -ksp_gmres_modifiedgramschmidt -ksp_gmres_restart 500 -pc_type ilu -pc_factor_levels 4 -pc_factor_shift_type nonzero
      -> singularity of J perhaps related to velocity term being too small relative to element size? maybe forward and adjoint, which only differ by sign of velocity, look too similar? no, one acts on adjoint and one acts on state...different columns...
        -> only velocity and reaction use time...
      -> on bassi
          92x66x3
            iso, all homo diri - almost 3 hours of "alive time", but only 6 minutes of "active time"...
            iso, f homo diri - 8.3 hours of "active time", but about 12.2 hours of "alive time"...
            iso, no diri
            aniso, f homo diri
            aniso, no diri
          184x132x4
            iso, f homo diri
            iso, no diri
            aniso, f homo diri
            aniso, no diri
        
bart told karen he has an example that would be applicable to master's and easy to apply in milo?
--> focus on getting the two papers written and submitted this semester before opening more cans...will help you narrow down your ideas and see what work can/should still be done...and to understand what it means to have something finished...you should be expecting to get 2-3 papers from thesis...

karen will be at mit 4/6-7

date for forming committee is a guideline...

----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------

DO NOT EVER USE HARD RESET EVER AGAIN IT DOESN'T JUST APPLY TO SUBDIRECTORIES IT APPLIES TO THE WHOLE REPO

----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------

bart didn't seem to have any actual model pairs in mind, just ideas for applications...batteries? also using summer cd(r)...

-if we want to compare linear solves, then need to make sure that linear solves are being solved precisely (especially with iterative solvers!)
-sometimes a newton solve with not converge if linear solves done precisely, but sometimes the looseness of inexact solve can save it (ex: continuation on HF cdr, 600->700 doesn't work if superlu used...)

-write up new error breakdown
  -RUN NEW ERROR BREAKDOWN WITH SCALAR VS FIELD
-ask if continuationsystem can be used for the desired purpose
  -yes, but arclength continuation is overkill...natural continuation is more common...calculating optimal parameter stepsizes would require tangent information of some sort, and at that point you might as well use arclength...which is meant for robustness, not necessarily for efficieny...
-streamline psi-to-superadj
  -how long does it take to set up meshes/system objects? if significant, is there a way to just reassign subdomain IDs? have all the divvy text available and read them in? (re-run from start-to-finish each time new divvy available)
  -reassign subdomain ID without changing current solution? keep that as initial guess?
  -seems like it might be lot less work to read in xda files like in superadj than to read in exo like in psi_MF...psi_MF had a lot of time spent in inverse_map() under FE...
    -is psi_MF also reads in psiLF_mesh.xda instead of exo mesh, time spent in inverse_map() doesn't change...
    -inverse_map() is called in relation to sensor points...not sure why called ten times more often in psiMF than superadj...
      -order of mag difference doesn't appear in psiLF iteration with R=-42...both spend considerable time there...
      -number of calls reduced to about 1/3 if only 1 of 3 datapoints kept, and yet if explicit calls counted, they only amount to hundreds, not millions...majority of explict call count also disappears if no numerical vs analytical jacobian comparison...
      -contains_point calls inverse_map...and you're calling that for every element...use PointLocatorTree to find and store element that points are in...
  -solution transfer hopefully doesn't take up too much? (nope it doesn't)
  -is it fair to not count refinement in timing? just cuz you're doing it in matlab...which is probably not the most efficient way either...
    -if we have a problem where the two methods are sufficiently different, it shouldn't matter...
  -can we make a basis function a vector of original basis functions? would that help with grouping basis functions by node?
    *****what if you just trust that every group of 6 belongs to the same node?*****
  
  -LF iteration, superlu: 
    split codes = 25+72=97 (10+51=61 in linear solve)
    joined code = 90 (63 in linear solve)
    joined code, split super-adj = 50 (20 in linear solve)

  -FOR FINAL COMPARISON:
    -turn off numerical jacobian check
    -turn off norm checks
    -use analytic velocity for both
    -be consistent with solver tolerances
    -close other programs...what's playing on youtube affects runtime...
    
-benjamin model thoughts:
  -combustion
  -stokes v navierstokes
  -ROM for LF? how to stitch? if a LF/MF linear solve is cheaper, than all the better...but how fares the theory?
  -time dependent oscillations - reactor tube or flow over clamped wing
  
  -> first try with scalar A, E? what about just inferring k, and not the parameters that describe it based on the Arrhenius eq?
  -> alternative to arrhenius equation? ("of Arrhenius type and modeled as in Cuenot and Poinsot")
    -alternatives to even having concentrations to powers? (vikram will look at this)
  -> field vs scalar E? hopefully field E makes things nonlinear enough to require many more nonlinear steps...
    -does it even make sense to make E a field?
    -what happened to previous attempts to limit scalar and field param variables to different subdomains?
      -see practice/T_channel/diff_param_res/all_linear/get_psi_MF_discon/debug_notes.txt:
  -> HF: couple non-newtonian flow? depends on temp...what sorts of reactants would this make sense for?
  -> HF: couple to compressible navier stokes? (density depends on temperature; varying density would also affect reaction expression)
  -> Galagali, Nikhil: thesis on different combustion models...
    -seems to be about inferring (stochastically) for intermediate reaction mechanisms (infer for pathway) and their reaction rates
  -> Rebecca Morrison: might have some knowledge of chemical model hierarchies
    -> nikhil and rebecca are both youseff's...maybe ask him?
  -> just make the LF a ROM? gah how to those work?
    -need HF fwd runs in order to build basis...that would probably have to be included in the cost of even creating LF model...
    -projection-based: let the solution only exist in subspace of R^n, defined by a not-full-rank basis; would affect state and adjoint, but not params...ROMs for inverse problems?
    -each component of the reduced basis is likely to have nonzero components inside and/or outside the LF regions...do we just ignore those bits that are outside the LF regions? pretend they were just given?
    -doesn't seem easily implementable in libmesh...though it does have a 'Reduced Basis' section in examples...
    -can theoretically still use a ROM, but will probably need specialized method to build the basis...
  -can we/would it make sense to infer temp from measurements of temp?
  -HF has additional reactions that also affect temperature? (instead of adding intermediate reactants, just have other species with their own reactions that also contribute to temp...)
    -ex: 2H_2 + O_2 -> 2H_2O, C + O_2 -> CO_2; C is a contaminant? (also N2+O2=2NO, 2NO+O2=2NO2)
      -if LF is assuming C = 0 (no carbon-oxygen reaction), then MF model will have 'pinning' in LF parts of domain...can have pinned value in initial guess?
    -pure-oxygen vs "air"? combust methane in oxygen vs in air?
    -impure mixture doesn't even need to be air...make up some contaminant...
      -NOx has complicated mechanism, and doesn't seem to have a simple version with O_2 instead of O
      -kinda weird, though, to know the params for your contaminants but not your main reaction...
  -if you knew the field for H_2 and O_2 and T, could you write equation for H_2O as convdiff with reaction term as source? infer for parameter describing inlet H_2 and O_2 (and inlet T?) and also parameterizing fields (say, you guess it'll look somewhat half-eliptic?), which thus parameterizes forcing?; measurements of H_2O or T?
    -if parameters can be used to create analytical expressions for H_2, O_2, T fields, couldn't you make this a ROM? basis depending on analytical expression, not derived from original FE basis functions?
    -parameters that affect diri BCs...how to derive adjoint, and is that something you could implement?
    -what if you do H_2 and O_2 fields without reaction, and read them in to create forcing function? based on assumption that H_2 and O_2 concentrations large enough so as to be mostly unaffected by reaction? 
      -if there is a shat ton more of one reactant than another, then the amount of product is limited by the availability of the scarcer species...can't quite divorce the product from the concentration of *both* reactants though...
    
-stokes vs navierstokes
  -parameters in b+v are actually not in diri bcs...would appear in weak form...
  -does it really not make sense to try to mesh stokes and navierstokes in one domain? at least, not have large parts of domain with the very different reynolds numbers...
-different physics + different mesh resolutions? HF: more nonlinear and higher resolution?
  -vikram poking whether libmesh can do this...-> yes
  
-does having localized reaction (as if other reactant(s) were available at only certain location, and which concentration was very large/kept constant; or as if catalyst sufficiently reduced activation energy only in some region) make the problem more nonlinear?
  -cdr solve, r = 400, centered at (2.5,0.5)
    -everywhere: 5 NL iters
    -r exponetially decaying, decay param 1:  5 NL iters
    -r exponetially decaying, decay param 10: 4 NL iters
    -r exponetially decaying, decay param 20: 4 NL iters
    -r exponetially decaying, decay param 20: 3 NL iters
  -it shouldn't...otherwise MF with cd+cdr would be worse...
    
  -what happens to the qoi if you remove data points altogether? (in chad's thing, there seemed to be the possibility of certain data points being ignored/not of much weight) how does the error breakdown change? what if you change the data values?
    -can we use this to say something about experimental design?
    -adjoints are about sensitivity to perturbations...sadj_auxc seems to indicate most sensitivty to data mismatch near middle sensor...?
      -sensitivity of what? error in qoi?
        -kinda seems to fit that interpretation...if you could only have one sensor in one of the three positions, then having middle gives lowest relative difference in QoI...if you had a right sensor and could only add middle or left sensor, then most reduction in relative difference in QoI if add middle...same if you had left sensor at first...relative difference increases from just-right to left+right, so is this even a good measure?
        
        
poke dissolution/precipitation forward problem, see if it does have an interesting steady state?
  -if not, then try **iso conv-diff vs aniso conv-diff-react**? or **inferring for k with regular cd vs cdr**?
  -try inexact-linear-solve continuation on original problem, vs newly integrated? does newly integrated benefit from loose linear solve?

is continuation not 'state of the art' enough because we would not normally even solve the whole KKT system, and instead go for optimization program? harder to compare the two then...although even for optimization a good initial guess is sometimes needed...

for 442, taking two refinements of 0.05 increments each in integrated code doesn't end up with <1% error...

natural continuation vs integrated adaptivity: (strict linear solve, gmres)
  r = -442: cont steps (0,100,200,300,400,442) < adaptive (1 step, 0.11 final fraction) < cont steps (400, 442)
    -> 25 (15 linear ) vs 35 (23 linear) vs 40 (28 linear)
    -> 1 adaptive step, 0.11 final refinement fraction, 0.0144 estimated relative error, 0.0035 actual relative error
  r = -1000: adaptive < cont steps (0:100:1000) < cont steps (400:100:1000)
    -> 43 (30 linear) vs 56 (35 linear) vs 67 (45 linear)
    -> 1 adaptive step, 0.11 final refinement fraction, 0.0115 estimated relative error, 0.004 actual relative error
    -> this looks possibly promising...**do 3D version with iso conv-diff vs aniso conv-diff-react?** (same mesh first?)
      -ONLY RUN 3D ON BASSI
