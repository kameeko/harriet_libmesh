#include <iostream>
#include <algorithm>
#include <math.h>
#include <iomanip>
#include <fstream>

#include "libmesh/libmesh.h"
#include "libmesh/mesh.h"
#include "libmesh/mesh_generation.h"
#include "libmesh/vtk_io.h"
#include "libmesh/linear_implicit_system.h"
#include "libmesh/equation_systems.h"
#include "libmesh/mesh_refinement.h"

#include "libmesh/fe.h"
#include "libmesh/quadrature_gauss.h"
#include "libmesh/sparse_matrix.h"
#include "libmesh/numeric_vector.h"
#include "libmesh/dense_matrix.h"
#include "libmesh/dense_vector.h"
#include "libmesh/elem.h"
#include "libmesh/dof_map.h"

#include "libmesh/exodusII_io.h"

#include "libmesh/getpot.h"
#include "convdiff_mprime.h"
#include "libmesh/equation_systems.h"
#include "libmesh/steady_solver.h"
#include "libmesh/gmv_io.h"

using namespace libMesh;

int main (int argc, char** argv){

	LibMeshInit init (argc, argv); //initialize libmesh library

	std::cout << "Running " << argv[0];
	for (int i=1; i<argc; i++)
		std::cout << " " << argv[i];
	std::cout << std::endl << std::endl;

	Mesh mesh(init.comm());
	
	GetPot infile("inputs.in");
	std::string find_mesh_here = infile("mesh","psiLF_mesh.xda");
    mesh.read(find_mesh_here);
    
    // Print information about the mesh to the screen.
    mesh.print_info();

    // Create an equation systems object.
    EquationSystems equation_systems (mesh);

    // Name system; need to have same name is system being read in
    //ConvDiff_MprimeSys & system = 
    //    equation_systems.add_system<ConvDiff_MprimeSys>("Diff_ConvDiff_MprimeSys"); //for diff-convdiff
    ConvDiff_MprimeSys & system = 
        equation_systems.add_system<ConvDiff_MprimeSys>("ConvDiff_MprimeSys"); //for scalar-field

    // Steady-state problem	
    system.time_solver = AutoPtr<TimeSolver>(new SteadySolver(system));

    // Read in all the equation systems data from the LF solve (system, solutions, rhs, etc)
    std::string find_psiLF_here = infile("psiLF_file","psiLF.xda");
    std::cout << "Looking for psiLF at: " << find_psiLF_here << "\n\n";

    equation_systems.read(find_psiLF_here, READ,
	    EquationSystems::READ_HEADER |
	    EquationSystems::READ_DATA |
	    EquationSystems::READ_ADDITIONAL_DATA);
	    
    //some checks to make sure things were read in properly...
    Real readin_L2 = system.calculate_norm(*system.solution, 0, L2);  
    std::cout << "Read in solution norm: "<< readin_L2 << std::endl << std::endl;
    equation_systems.print_info();
    
#ifdef LIBMESH_HAVE_GMV
    GMVIO(equation_systems.get_mesh()).write_equation_systems(std::string("psi.gmv"), equation_systems);
#endif
#ifdef LIBMESH_HAVE_EXODUS_API
    ExodusII_IO (mesh).write_equation_systems("psi.exo",equation_systems);
#endif // #ifdef LIBMESH_HAVE_EXODUS_API

    return 0;
}
